<?php

namespace $CLASS_NAMESPACE$;

use Fintech\Core\Exceptions\StoreOperationException;
use Fintech\Core\Exceptions\UpdateOperationException;
use Fintech\Core\Exceptions\ResourceNotFoundException;
use Fintech\Core\Exceptions\DeleteOperationException;
use Fintech\Core\Exceptions\RestoreOperationException;
use Fintech\Core\Traits\ApiResponseTrait;
$RESOURCE_NAMESPACES$
$REQUEST_NAMESPACES$
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;

/**
 * Class $CLASS$
 * @package $CLASS_NAMESPACE$
 *
 * @lrd:start
 * This class handle create, display, update, delete & restore
 * operation related to $RESOURCE_VARIABLE$
 * @lrd:end
 *
 */

class $CLASS$ extends Controller
{
    use ApiResponseTrait;

    /**
     * @lrd:start
     * Return a listing of the $RESOURCE_VARIABLE$ resource as collection.
     *
     * *```paginate=false``` returns all resource as list not pagination*
     * @lrd:end
     *
     * @param $INDEX_REQUEST$ $request
     * @return $RESOURCE$Collection|JsonResponse
     */
    public function index($INDEX_REQUEST$ $request): $RESOURCE$Collection|JsonResponse
    {
        try {
            $inputs = $request->validated();

            $$RESOURCE_VARIABLE$Paginate = \$MODULE$::$RESOURCE_VARIABLE$()->list($inputs);

            return new $RESOURCE$Collection($$RESOURCE_VARIABLE$Paginate);

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }

    /**
     * @lrd:start
     * Create a new $RESOURCE_VARIABLE$ resource in storage.
     * @lrd:end
     *
     * @param $STORE_REQUEST$ $request
     * @return JsonResponse
     * @throws StoreOperationException
     */
    public function store($STORE_REQUEST$ $request): JsonResponse
    {
        try {
            $inputs = $request->validated();

            $$RESOURCE_VARIABLE$ = \$MODULE$::$RESOURCE_VARIABLE$()->create($inputs);

            if (!$$RESOURCE_VARIABLE$) {
                throw (new StoreOperationException)->setModel(config('fintech.$LOWER_NAME$.$RESOURCE_VARIABLE$_model'));
            }

            return $this->created([
                'message' => __('$LOWER_NAME$::messages.resource.created', ['model' => '$RESOURCE$']),
                'id' => $$RESOURCE_VARIABLE$->id
             ]);

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }

    /**
     * @lrd:start
     * Return a specified $RESOURCE_VARIABLE$ resource found by id.
     * @lrd:end
     *
     * @param string|int $id
     * @return $RESOURCE$Resource|JsonResponse
     * @throws ResourceNotFoundException
     */
    public function show(string|int $id): $RESOURCE$Resource|JsonResponse
    {
        try {

            $$RESOURCE_VARIABLE$ = \$MODULE$::$RESOURCE_VARIABLE$()->read($id);

            if (!$$RESOURCE_VARIABLE$) {
                throw new ResourceNotFoundException(__('$LOWER_NAME$::messages.resource.notfound', ['model' => '$RESOURCE$', 'id' => strval($id)]));
            }

            return new $RESOURCE$Resource($$RESOURCE_VARIABLE$);

        } catch (ResourceNotFoundException $exception) {

            return $this->notfound($exception->getMessage());

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }

    /**
     * @lrd:start
     * Update a specified $RESOURCE_VARIABLE$ resource using id.
     * @lrd:end
     *
     * @param $UPDATE_REQUEST$ $request
     * @param string|int $id
     * @return JsonResponse
     * @throws ResourceNotFoundException
     * @throws UpdateOperationException
     */
    public function update($UPDATE_REQUEST$ $request, string|int $id): JsonResponse
    {
        try {

            $$RESOURCE_VARIABLE$ = \$MODULE$::$RESOURCE_VARIABLE$()->read($id);

            if (!$$RESOURCE_VARIABLE$) {
                throw new ResourceNotFoundException(__('$LOWER_NAME$::messages.resource.notfound', ['model' => '$RESOURCE$', 'id' => strval($id)]));
            }

            $inputs = $request->validated();

            if (!\$MODULE$::$RESOURCE_VARIABLE$()->update($id, $inputs)) {

                throw new UpdateOperationException();
            }

            return $this->updated(__('$LOWER_NAME$::messages.resource.updated', ['model' => '$RESOURCE$']));

        } catch (ResourceNotFoundException $exception) {

            return $this->notfound($exception->getMessage());

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }

    /**
     * @lrd:start
     * Soft delete a specified $RESOURCE_VARIABLE$ resource using id.
     * @lrd:end
     *
     * @param string|int $id
     * @return JsonResponse
     * @throws ResourceNotFoundException
     * @throws DeleteOperationException
     */
    public function destroy(string|int $id)
    {
        try {

            $$RESOURCE_VARIABLE$ = \$MODULE$::$RESOURCE_VARIABLE$()->read($id);

            if (!$$RESOURCE_VARIABLE$) {
                throw new ResourceNotFoundException(__('$LOWER_NAME$::messages.resource.notfound', ['model' => '$RESOURCE$', 'id' => strval($id)]));
            }

            if (!\$MODULE$::$RESOURCE_VARIABLE$()->destroy($id)) {

                throw new DeleteOperationException();
            }

            return $this->deleted(__('$LOWER_NAME$::messages.resource.deleted', ['model' => '$RESOURCE$']));

        } catch (ResourceNotFoundException $exception) {

            return $this->notfound($exception->getMessage());

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }

    /**
     * @lrd:start
     * Restore the specified $RESOURCE_VARIABLE$ resource from trash.
     * ** ```Soft Delete``` needs to enabled to use this feature**
     * @lrd:end
     *
     * @param string|int $id
     * @return JsonResponse
     */
    public function restore(string|int $id)
    {
        try {

            $$RESOURCE_VARIABLE$ = \$MODULE$::$RESOURCE_VARIABLE$()->read($id, true);

            if (!$$RESOURCE_VARIABLE$) {
                throw new ResourceNotFoundException(__('$LOWER_NAME$::messages.resource.notfound', ['model' => '$RESOURCE$', 'id' => strval($id)]));
            }

            if (!\$MODULE$::$RESOURCE_VARIABLE$()->restore($id)) {

                throw new RestoreOperationException();
            }

            return $this->restored(__('$LOWER_NAME$::messages.resource.restored', ['model' => '$RESOURCE$']));

        } catch (ResourceNotFoundException $exception) {

            return $this->notfound($exception->getMessage());

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }

    /**
     * @lrd:start
     * Create a exportable list of the $RESOURCE_VARIABLE$ resource as document.
     * After export job is done system will fire  export completed event
     *
     * @lrd:end
     *
     * @param $INDEX_REQUEST$ $request
     * @return JsonResponse
     */
    public function export($INDEX_REQUEST$ $request): JsonResponse
    {
        try {
            $inputs = $request->validated();

            $$RESOURCE_VARIABLE$Paginate = \$MODULE$::$RESOURCE_VARIABLE$()->export($inputs);

            return $this->exported(__('$LOWER_NAME$::messages.resource.exported', ['model' => '$RESOURCE$']));

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }

    /**
     * @lrd:start
     * Create a exportable list of the $RESOURCE_VARIABLE$ resource as document.
     * After export job is done system will fire  export completed event
     *
     * @lrd:end
     *
     * @param $IMPORT_REQUEST$ $request
     * @return $RESOURCE$Collection|JsonResponse
     */
    public function import($IMPORT_REQUEST$ $request): JsonResponse
    {
        try {
            $inputs = $request->validated();

            $$RESOURCE_VARIABLE$Paginate = \$MODULE$::$RESOURCE_VARIABLE$()->list($inputs);

            return new $RESOURCE$Collection($$RESOURCE_VARIABLE$Paginate);

        } catch (\Exception $exception) {

            return $this->failed($exception->getMessage());
        }
    }
}
